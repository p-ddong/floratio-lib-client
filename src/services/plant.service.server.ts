// src/services/plant.server.ts
// ðŸ‘ˆ gáº¯n server-only Ä‘á»ƒ Next.js khÃ´ng cho client bundle láº«n lá»™n
import "server-only";

import { PlantList, PlantDetail, Family, Attribute } from "@/types";
import { BASE_API } from "@/constant/API";

/**
 * HÃ m trá»£ giÃºp chung â€“ dÃ¹ng native fetch Ä‘á»ƒ táº­n dá»¥ng cÆ¡ cháº¿ cache & revalidate
 * @param path    pháº§n path sau BASE_API
 * @param reval   sá»‘ giÃ¢y Next.js tá»± revalidate (máº·c Ä‘á»‹nh 60s)
 */
async function getJSON<T>(path: string, reval = 0): Promise<T>{
  const res = await fetch(`${BASE_API}${path}`, {
    // TÃ­ch há»£p caching cá»§a App Router
    next: { revalidate: reval },
    // force-cache (máº·c Ä‘á»‹nh) Ä‘á»§ dÃ¹ng cho GET
  });

  if (!res.ok) {
    // Ghi log hoáº·c Sentry táº¡i Ä‘Ã¢y náº¿u muá»‘n
    throw new Error(`Failed to fetch ${BASE_API} ${path} â€“ ${res.status}`);
  }

  return res.json() as Promise<T>;
}

/* ---------- API cá»¥ thá»ƒ ---------- */
export const fetchPlantList      = () => getJSON<PlantList[]>("plants/list");
export const fetchFamiliesList   = () => getJSON<Family[]>("plants/families/list");
export const fetchAttributesList = () => getJSON<Attribute[]>("plants/attributes/list");
export const fetchPlantDetail    = (id: string) =>
  getJSON<PlantDetail>(`plants/detail/${id}`);
